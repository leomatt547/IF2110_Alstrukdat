KAMUS
type ElType: integer
type Address: pointer to Node
type Node: < Info: ElType,
            Next: Address >
type List: < First:address,
            Last: address >
{ Last: alamat elemen terakhir. Karena field NEXT tidak ada secara eksplisit,
maka elemen terakhir dikenali dengan address-nya }
{ *** Selektor *** }
{ Deklarasi nama untuk variabel kerja }
L : List
P : address {address untuk traversal }
{ Maka First(L)..Last(L) adalah indeks efektif elemen tabel anggota list
First(L) menjadi L.First 
Last(L) menjadi L.Last
Next(P) menjadi P­.Next 
Info(P) menjadi P­.Info}

{ PROTOTYPE }
{***************** TEST LIST KOSONG *****************}
function IsEmpty(List L)
{ Mengirim true jika list kosong: First(L) = dummy@
dan Last(L) = dummy@ }
ALGORITMA
    --> (First(L) = Last(L))

{***************** PEMBUATAN LIST KOSONG *****************}
procedure MakeEmpty(List L)
{ I.S. sembarang }
{ F.S. Terbentuk list L kosong, dengan satu elemen dummy }
{ Jika gagal maka First = Last = Nil dan list gagal terbentuk }
KAMUS LOKAL:
    Pdummy: address
ALGORITMA
    Pdummy <-- Alokasi(0)
    if (Pdummy <> Nil) then
        First(L) <-- Pdummy
        Last(L) <-- Pdummy
    else
        First(L) <-- Nil
        Last(L) <-- Nil

{***************** SEARCHING *****************}
function Search(List L, ElType X)
{ Mencari apakah ada node list dengan info(P) = X }
{ Jika ada, mengirimkan address node tersebut. }
{ Jika tidak ada, mengirimkan Nil }
KAMUS LOKAL
    P: address
ALGORITMA
    Info(Last(L)) <-- X
    P <-- First(L)
    while (Info(P) <> X) do
        P <-- Next(P)
    if (P <> Last(L))
        --> P
    else
        --> Nil

procedure InsertFirst(List L, ElType X)
{ I.S. List L terdefinisi }
{ F.S. Menambahkan elemen X sebagai elemen pertama List L }
KAMUS LOKAL
    P: address
ALGORITMA
    P <-- Alokasi(X)
    if (P <> Nil) then
        Next(P) <-- First(L)
        First(L) <-- P

procedure InsertLast1(List L, ElType X)
{Alamat Dummy TIDAK BOLEH BERUBAH}
{ I.S. List L terdefinisi }
{ F.S. X ditambahkan sebagai elemen terakhir yang baru, }
{ yaitu menjadi elemen sebelum elemen dummy }
KAMUS LOKAL
    P, last: address
ALGORITMA
    if (IsEmpty(L)) then
        InsertFirst(L,X)
    else
        P <-- Alokasi(X)
        if (P <> Nil) then
            last <-- First(L)
            while (Next(last) <> Last(L)) do
                last <-- Next(L)
            {Next(last) = Last(L)}
            Next(last) <-- P
            Next(P) <-- Last(L)
            or
            InsertAfter(L,P,last)

procedure InsertLast2(List L, ElType X)
{Alamat Dummy TIDAK BOLEH BERUBAH}
{ I.S. List L terdefinisi }
{ F.S. X ditambahkan sebagai elemen terakhir yang baru, }
{ yaitu menjadi elemen sebelum elemen dummy }
KAMUS LOKAL
    P: address
ALGORITMA
    if (IsEmpty(L)) then
        InsertFirst(L,X)
    else
        Info(Last(L)) <-- X
        P <-- Alokasi(X)
        if (P <> Nil) then
            Next(Last(L)) <-- P
            Last(L) <-- P       

procedure DeleteFirst(List L, ElType X)
{ I.S. List tidak kosong }
{ F.S. X adalah elemen pertama list sebelum penghapusan }
{ Elemen list berkurang satu (mungkin menjadi kosong) }
{ First element yg baru adalah suksesor elemen pertama yang lama }
KAMUS LOKAL
    P: address
ALGORITMA
    P <-- First(L)
    X <-- Info(P)
    First(L) <-- Next(First(L)) // bisa juga: First(L) <-- Next(P)
    Dealokasi(P)

procedure DeleteLast1(List L, ElType X)
{ I.S. List tidak kosong }
{ F.S. X adalah terakhir sebelum dummy pada list sebelum penghapusan }
{ Elemen list berkurang satu (mungkin menjadi kosong) }
KAMUS LOKAL
    last, preclast: address
ALGORITMA
    last <-- First(L)
    preclast <-- Nil
    while (Next(last) <> Last(L)) do
        preclast <-- last
        last <-- Next(last)
    X <-- Info(last)
    if (preclast = Nil) then
        First(L) <-- Last(L)
    else
        Next(preclast) <-- Last(L)
    Dealokasi(last)

procedure DeleteLast2 (input/output L : List, output X : infotype)
{ I.S. L terdefinisi, tidak kosong. X sembarang. }
{ F.S. X berisi nilai elemen terakhir L. Elemen terakhir L dihapus dan didealokasi.
L mungkin menjadi kosong. }
Kamus Lokal
    P, Prec : address
Algoritma
    if Next(First(L)) = Last(L) then {satu elemen, delete first}
        DeleteFirst(L,X)
    else
        P <-- First(L)
        while Next(P) ≠ Last(L) do {cari elemen terakhir, i.e. elemen sebelum Last(L)}
            Prec <-- P
            P <-- Next(P)
        {Next(P) = Last(L), P adalah elemen terakhir}
        Next(Prec) <-- Last(L) {atau Next(P)}
        X <-- Info(P)
        Dealokasi(P)

function SearchAdr (L : List, X : infotype) --> address
{ Mengembalikan address elemen L (misalnya P), dengan Info(P)=X. Mengembalikan Nil jika
tidak ada elemen L yang memenuhi. L mungkin kosong.
Gunakan skema searching yang paling cocok dengan struktur ini.}
Kamus Lokal
    P : address
Algoritma
    P <-- First(L)
    Info(Last(L)) <-- X {pasang sentinel}
    while Info(P) ≠ X do {searching dengan sentinel, pasti ketemu}
        P <-- Next(P)
    {Info(P) = X}
    if (P ≠ Last(L)) then {ditemukan bukan pada sentinel}
        --> P
    else {P = Last(L), ditemukan pada sentinel}
        --> Nil