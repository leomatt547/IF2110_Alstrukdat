KAMUS
type ElType: integer
type Address: pointer to Node
type Node: < Info: ElType,
            Next: Address >
type Queue: < HEAD: address
              TAIL: address >
{ Last: alamat elemen terakhir. Karena field NEXT tidak ada secara eksplisit,
maka elemen terakhir dikenali dengan address-nya }
{ *** Selektor *** }
{ Deklarasi nama untuk variabel kerja }
L : List
P : address {address untuk traversal }
{ Maka First(L)..Last(L) adalah indeks efektif elemen tabel anggota list
Head(S) menjadi Q.HEAD 
Tail(S) menjadi Q.TAIL 
InfoTop(S) menjadi Q.HEAD^.info
InfoTail(S) menjadi Q.TAIL^.info
Next(P) menjadi P^­.Next 
Info(P) menjadi P­^.Info}

{ Prototype manajemen memori }
procedure Alokasi(address *P, ElType X)
{ I.S. Sembarang }
{ F.S. Alamat P dialokasi, jika berhasil maka Info(P)=X dan Next(P)=Nil }
{ P=Nil jika alokasi gagal }
ALGORITMA
    Alokasi(P,X)
    if (P <> Nil) then
        Info(P) <-- X
        Next(P) <-- Nil

procedure Dealokasi(address P)
{ I.S. P adalah hasil alokasi, P != Nil }
{ F.S. Alamat P didealokasi, dikembalikan ke sistem }
ALGORITMA
    free(P)

function IsEmpty(Queue Q)
{ Mengirim true jika Q kosong: HEAD(Q)=Nil and TAIL(Q)=Nil }
int NBElmt(Queue Q)
{ Mengirimkan banyaknya elemen queue. Mengirimkan 0 jika Q kosong }
ALGORITMA
    --> (Head(Q) = Nil) and (Tail(Q) = Nil)

{** Kreator **}
procedure CreateEmpty(Queue *Q)
{ I.S. sembarang }
{ F.S. Sebuah Q kosong terbentuk }
{** Primitif Enqueue/Dequeue **}
ALGORITMA
    Head(Q) <-- Nil
    Tail(Q) <-- Nil

procedure Enqueue(Queue *Q, ElType X)
{ Proses: Mengalokasi X dan menambahkan X pada bagian TAIL dari Q
jika alokasi berhasil jika alokasi gagal Q tetap }
{ Pada dasarnya adalah proses insert last }
{ I.S. Q mungkin kosong }
{ F.S. X menjadi TAIL, TAIL "maju" }
KAMUS LOKAL
    P: address
ALGORITMA
    Alokasi(P,X)
    if (P <> Nil) then
        if (IsEmpty(Q)) then
            Head(Q) <-- P
        else
            Next(Tail(Q)) <-- P 
        Tail(Q) <-- P
    {else: Alokasi gagal, Q tetap}

procedure Dequeue(Queue *Q, ElType *X)
{ Proses: Menghapus X pada bagian HEAD dari Q dan mendealokasi elemen HEAD }
{ Pada dasarnya operasi delete first }
{ I.S. Q tidak mungkin kosong }
{ F.S. X = nilai elemen HEAD pd I.S., HEAD "mundur" }
KAMUS LOKAL
    P: address
ALGORITMA
    X <-- infoHead(Q)
    P <-- Head(Q)
    Head(Q) <-- Next(Head(Q))
    if (Head(Q)=Nil) then
        Tail(Q) <-- Nil
    Next(P) <-- Nil
    Dealokasi(P)