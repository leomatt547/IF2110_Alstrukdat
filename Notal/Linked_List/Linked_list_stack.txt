KAMUS
type ElType: integer
type Address: pointer to Node
type Node: < Info: ElType,
            Next: Address >
type Stack: < TOP: address >
{ Last: alamat elemen terakhir. Karena field NEXT tidak ada secara eksplisit,
maka elemen terakhir dikenali dengan address-nya }
{ *** Selektor *** }
{ Deklarasi nama untuk variabel kerja }
L : List
P : address {address untuk traversal }
{ Maka First(L)..Last(L) adalah indeks efektif elemen tabel anggota list
Top(S) menjadi S.TOP 
InfoTop(S) menjadi S.TOP^.info
Next(P) menjadi P^­.Next 
Info(P) menjadi P­^.Info}

{ Prototype manajemen memori }
procedure Alokasi(address P, ElType X)
{ I.S. Sembarang }
{ F.S. Alamat P dialokasi, jika berhasil maka Info(P)=X dan Next(P)=Nil }
{ P=Nil jika alokasi gagal }
KAMUS LOKAL
    P: address
ALGORITMA
    Alokasi(P,X)
    if (P <> Nil) then
        Next(P) <-- Top(S)
        Top(S) <-- P

procedure Dealokasi(address P)
{ I.S. P adalah hasil alokasi, P <> Nil }
{ F.S. Alamat P didealokasi, dikembalikan ke sistem }
KAMUS LOKAL
    P: address
ALGORITMA
    free(P)

{ ********* PROTOTYPE REPRESENTASI LOJIK STACK **************}
boolean IsEmpty(Stack S)
{ Mengirim true jika Stack kosong: TOP(S) = Nil }
ALGORITMA
    --> (Top(S)=Nil)

procedure CreateEmpty(Stack S)
{ I.S. sembarang }
{ F.S. Membuat sebuah stack S yang kosong }
ALGORITMA
    Top(S) = Nil

procedure Push(Stack S, ElType X)
{ Menambahkan X sebagai elemen Stack S }
{ I.S. S mungkin kosong, X terdefinisi }
{ F.S. X menjadi TOP yang baru jika alokasi X berhasil, }
{ jika tidak, S tetap }
{ Pada dasarnya adalah operasi Insert First pada list linier }
KAMUS LOKAL
    P: address
ALGORITMA
    Alokasi(P,X)
    if (P <> Nil) then
        Next(P) <-- Top(S)
        Top(S) <-- P
    {else: alokasi gagal, S tetap}

procedure Pop(Stack S, ElType X)
{ Menghapus X dari Stack S. }
{ I.S. S tidak mungkin kosong }
{ F.S. X adalah nilai elemen TOP yang lama, }
{ elemen TOP yang lama didealokasi }
{ Pada dasarnya adalah operasi Delete First pada list linier }
KAMUS LOKAL
    P: address
ALGORITMA
    X <-- InfoTop(S)
    P <-- Top(S)
    Top(S) <-- Next(Top(S))
    Next(P) <-- Nil
    Dealokasi(P)