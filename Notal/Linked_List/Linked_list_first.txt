{ List direpresentasi dengan pointer }
constant Nil : ...
type infotype : integer
type ElmtList : < Info : infotype, Next : address >
type address : pointer to ElmtList
type List : < First, Last : address >
{ *** Selektor *** }
{ Jika L : List dan P : address, maka penulisan :
    First(L) menjadi L.First; Last(L) menjadi L.Last;
    Next(P) menjadi P­.Next; Info(P) menjadi P­.Info }
{*** Predikat pemeriksaan *** }
function IsEmpty (L : List) --> boolean
{ Mengirimkan true jika list kosong, false jika tidak kosong }
{ *** Konstruktor *** }
procedure CreateEmpty (output L : List)
{ I.S. Sembarang; F.S. Terbentuk list L kosong sesuai definisi. Apabila gagal alokasi,
First(L) dan Last(L) menjadi Nil }
{ *** Manajemen Memory *** }
function Alokasi (X : infotype) --> address
{ Mengembalikan address hasil alokasi X. }
{ Jika alokasi berhasil, maka address tidak Nil, misalnya menghasilkan P, maka Info(P)=X
dan Next(P)=Nil. Jika alokasi gagal, mengembalikan Nil. }
procedure Dealokasi (input P : address)
{ I.S. P terdefinisi; F.S. P dikembalikan ke sistem }
{ *** Fungsi/Prosedur Lain *** }
procedure InsertFirst (input/output L : List, input X : infotype)
{ I.S. L terdefinisi, mungkin kosong. X terdefinisi. }
{ F.S. X menjadi elemen pertama L jika alokasi X berhasil. Jika alokasi gagal, L tetap. }
procedure InsertLast (input/output L : List, input X : infotype)
{ I.S. L terdefinisi, mungkin kosong. X terdefinisi. }
{ F.S. X menjadi elemen terakhir L jika alokasi X berhasil. Jika alokasi gagal, L tetap.}
procedure DeleteFirst (input/output L : List, output X : infotype)
{ I.S. L terdefinisi, tidak kosong. X sembarang. }
{ F.S. X berisi nilai elemen pertama L. Elemen pertama L dihapus dan didealokasi.
    L mungkin menjadi kosong. }
procedure DeleteLast (input/output L : List, output X : infotype)
{ I.S. L terdefinisi, tidak kosong. X sembarang. }
{ F.S. X berisi nilai elemen terakhir L. Elemen terakhir L dihapus dan didealokasi.
    L mungkin menjadi kosong. }
function SearchAdr (L : List, X : infotype) --> address
{ Mengembalikan address elemen L (misalnya P), dengan Info(P)=X. Mengembalikan Nil jika
tidak ada elemen L yang memenuhi. L mungkin kosong.
Gunakan skema searching yang paling cocok dengan struktur ini. }

procedure CreateEmpty (output L : List)
{ I.S. Sembarang; F.S. Terbentuk list L kosong sesuai definisi. Apabila gagal alokasi,
First(L) dan Last(L) menjadi Nil }
Kamus Lokal
    -
Algoritma
    First(L) <-- Alokasi(-999)
    Last(L) <-- First(L)

procedure CopyPos(input L1:List, Output L2:List)
{Menyalin semua elemen bernilai Positif (>0) dari sebuah list of integer
L1 menjadi L2}
Kamus Lokal
    P : Address
Algoritma
    CreateEmpty(L2)
    P <-- L1
    while (P != Nil) do
        if (p^.info > 0) then
            InsertLast(L2, P)
        P <-- P^.Next
    {P = Nil}

procedure DeleteFirst (input/output L : List, output X : infotype)
{ I.S. L terdefinisi, tidak kosong. X sembarang. }
{ F.S. X berisi nilai elemen pertama L. Elemen pertama L dihapus dan didealokasi.
L mungkin menjadi kosong. }
Kamus Lokal
    P : address
Algoritma
    P <-- First(L)
    First(L) <-- Next(P)
    X <-- Info(P)
    Dealokasi(P)

procedure DeleteLast (input/output L : List, output X : infotype)
{ I.S. L terdefinisi, tidak kosong. X sembarang. }
{ F.S. X berisi nilai elemen terakhir L. Elemen terakhir L dihapus dan didealokasi.
L mungkin menjadi kosong. }
Kamus Lokal
    P, Prec : address
Algoritma
    if Next(First(L)) = Last(L) then {satu elemen, delete first}
        DeleteFirst(L,X)
    else
        P <-- First(L)
        while Next(P) ≠ Last(L) do {cari elemen terakhir, i.e. elemen sebelum Last(L)}
            Prec <-- P
            P <-- Next(P)
        {Next(P) = Last(L), P adalah elemen terakhir}
        Next(Prec) <-- Last(L) {atau Next(P)}
        X <-- Info(P)
        Dealokasi(P)

procedure InsertFirst (input/output L : List, input X : infotype)
{ I.S. L terdefinisi, mungkin kosong. X terdefinisi. }
{ F.S. X menjadi elemen pertama L jika alokasi X berhasil. Jika alokasi gagal, L tetap. }
Kamus Lokal
    P : address
Algoritma
    P <-- Alokasi(X)
    if P ≠ Nil then
        Next(P) <-- First(L)
    First(L) <-- P

procedure InsertLast (input/output L : List, input X : infotype)
{ I.S. L terdefinisi, mungkin kosong. X terdefinisi. }
{ F.S. X menjadi elemen terakhir L jika alokasi X berhasil. Jika alokasi gagal, L tetap.}
Kamus Lokal
    P : address
Algoritma
    P <-- Alokasi(X) {bisa juga nilai lain, karena akan jadi dummy}
    if P ≠ Nil then
        Info(Last(L)) <-- X
        Next(Last(L)) <-- P
    Last(L) <-- P

function SearchA (L: List, X:infotype) --> boolean
{Mencari True apabila X ada pada List L
Skema searching dengan boolean}
Kamus Lokal
    P: address
    found: boolean
Algoritma
    found <-- false
    P <-- First(L)
    while (not found) do
        if (Info(P) = X) then
            found <-- True
        else
            P <-- Next(P)
    {found}
    --> found

function SearchB (L: List, X:infotype) --> boolean
{Mencari True apabila X ada pada List L
Skema searching tanpa boolean}
Kamus Lokal
    P: address
Algoritma
    if (IsEmpty(L)) then
        --> false
    else
        P <-- First(L)
        while (Next(P)<>Nil and Info(P)<>X) do
            P <-- Next(P)
        {Next(P) = Nil or Info(P)=X}
        --> Info(P) = X

procedure UpdateList(input x,y : infotype, input/output L:List)
{Menerima infotype x dan y dan sebuah List L dan kemudian mengganti
elemen pertama L yang bernilai x dengan y jika x ada di L
Jika x tidak ada di L, L tetap}
KAMUS LOKAL
    ganti: boolean
    P: address
Algoritma
    P <-- L
    ganti <-- false
    while (P <> Nil and not ganti) do
        if (P^.Info = x) then
            P^.Info <-- yang
            ganti <-- true
        else
            P <-- P^.Next