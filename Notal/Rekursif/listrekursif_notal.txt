{ List dengan first implicit direpresentasi menggunakan pointer }
constant Nil : ...
constant ValUndef : ...
type infotype : integer
type ElmtList : < Info : infotype, Next : address >
type address : pointer to ElmtList
type List : address
{ *** Selektor *** }
{ Jika L : List dan P : address, maka penulisan :
First(L) menjadi L; Next(P) menjadi P­.Next; Info(P) menjadi P­.Info }
{*** Predikat pemeriksaan *** }
function IsEmpty (L : List) → boolean
{ Mengirimkan true jika list kosong, false jika tidak kosong }
function IsOneElmt (L : List) → boolean
{ Mengirimkan true jika list hanya terdiri dari satu elemen }
{ *** Konstruktor *** }
procedure CreateEmpty (output L : List)
{ I.S. Sembarang; F.S. Terbentuk list L kosong sesuai definisi. Apabila gagal alokasi,
First(L) dan Last(L) menjadi Nil }
{ *** Manajemen Memory *** }
function Alokasi (X : infotype) → address
{ Mengembalikan address hasil alokasi X. }
{ Jika alokasi berhasil, maka address tidak Nil, misalnya menghasilkan P, maka Info(P)=X
dan Next(P)=Nil. Jika alokasi gagal, mengembalikan Nil. }
procedure Dealokasi (input P : address)
{ I.S. P terdefinisi; F.S. P dikembalikan ke sistem }

procedure AddX (input/output T: TabInt, input X: integer)
{ I.S: T, X terdefinisi }
{ F.S: Jika T.Neff < IdxMax, maka X ditambahkan pada IdxMin,
elemen lain digeser, T.Neff bertambah (panggil prosedur AddXRek);
Kasus khusus: jika T.Neff = IdxMax maka X tidak ditambahkan }
Algoritma
    if (L.Neff <> IdxMax) then
        AddXRek(L,X,L.Neff)
    
procedure AddXRek (IO L: List, input X : integer, input I : integer)
Kamus Lokal
Algoritma
    if I = 0 then
        L.TI[I+1] ← X
        L.Neff ← L.Neff + 1
    else
        L.TI[I+1] ← L.TI[I]
        AddXRek(L, X, I-1)

function Copy (L : List) → List
{ Mengirimkan salinan list L }
{ Jika alokasi gagal, mengirimkan L }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L)) then { Basis 0 }
        → L
    else { Rekurens }
        → Konso(FirstElmt(L),Copy(Tail(L))

procedure MengCopy (input Lin : List, output Lout : List)
{ I.S. Lin terdefinisi }
{ F.S. Lout berisi salinan dari Lin }
{ Proses : menyalin Lin ke Lout }
{ Jika alokasi gagal, Lout adalah ??? }
KAMUS LOKAL
    Ltemp : List
ALGORITMA
    if (IsEmpty(L)) then
        Lout ← Lin
    else
        Copy(Tail(L),Ltemp)
        Lout ← Konso(FirstElmt(Lin),Ltemp)

function Concat (L1, L2 : List) → List
{ Mengirimkan salinan hasil konkatenasi list L1 dan L2 }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L1) then { Basis }
        → Copy(L2)
    else { Rekurens }
        → Konso(FirstElmt(L1),Concat(Tail(L1),L2))

function Concat (L1, L2 : List) → List
{ Mengirimkan salinan hasil konkatenasi list L1 dan L2 }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L2) then {Basis }
        → Copy(L1)
    else {rekurens}
        → Kons•(Concat(L1, Head(L2)),LastElmt(L2))

procedure Meng_Concat (input L1, L2 : List, output LHsl : List)
{ I.S. L1, L2 terdefinisi }
{ F.S. LHsl adalah hasil melakukan konkatenasi L1 dan L2 dengan cara “disalin” }
{ Proses : Menghasilkan salinan hasil konkatenasi list L1 dan L2 }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L2) then {Basis }
        LHsl ← Copy(L2)
    else {rekurens}
        LHsl ← Konso(FirstElmt(L1),Concat(L1,Tail(L2))


function CountPos (L:List) → integer
{ Menghasilkan banyaknya kemunculan bilangan positif (>0) pada L }
KAMUS
Algoritma
    if (IsEmpty(L)) then
        → 0
    else
        if (Info(L) > 0) then
            → 1 + CountPos(Next(L))
        else
            → 0 + CountPos(Next(L))

function Fibonancci (N):
    if N = 0:
        return 0
    else if N = 1
        return 1
    else:
        return Fib(N-1) + Fib(N-2)

function FirstElmt (L : List) → InfoType
{ Mengirimkan elemen pertama sebuah list L yang tidak kosong }
KAMUS LOKAL
    -
ALGORITMA
    → Info(L)

procedure InsertLast (input/output L : List, input X : infotype)
{ I.S. L terdefinisi, mungkin kosong. X terdefinisi. }
{ F.S. X menjadi elemen terakhir L jika alokasi X berhasil. Jika alokasi gagal, L tetap.}
Kamus Lokal
    P : address
Algoritma
    if IsEmpty(L) then {basis}
        L ← Alokasi(X)
    else
        InsertLast(Next(L),X)

function IsEqual(L1,L2:List) → boolean
{ Menghasilkan true jika L1 dan L2 adalah list yang sama,
false jika tidak }
Kamus Lokal:
    equal : boolean
Algoritma
    depend on (L1,L2)
        (IsEmpty(L1) = IsEmpty(L2)) : → True
        (not(IsEmpty(L1)) = IsEmpty(L2)):  → False
        IsEmpty(L1) = not(IsEmpty(L2)) : → False
        else
            (Info(L1) = Info(L2)) and (isEqual(Next(L1),Next(L2))) : → True

function IsMember (L:List, X:infotype) → boolean
{ Menghasilkan true jika X adalah salah satu anggota list L,
false jika tidak }
KAMUS
Algoritma
    if (IsEmpty) then
        → False
    else
        → (Info(L)=X) or Ismember(Next(L), X)

function Konso (L : List, e : InfoType) → List
{ Mengirimkan list L dengan tambahan e sebagai elemen pertamanya }
{ Jika alokasi gagal, mengirimkan L }
KAMUS LOKAL
    P : address
ALGORITMA
    P ← Alokasi(e)
    if (P = Nil) then
        → L
    else
        {Insert First }
        Next(P)= L
        → P

function Kons• (L : List, e : infotype) → List
{ Mengirimkan list L dengan tambahan e sebagai elemen terakhir }
{ Jika alokasi gagal, mengirimkan L }
KAMUS LOKAL
    P : address
    Last : address
ALGORITMA
    P ← Alokasi(e)
    if (P = Nil) then
        → L
    else
    { Insert Last }
    if ISEmpty(L) then { insert ke list kosong }
        → L
    else
        Last ← L
        while (Next(Last) ≠ Nil) do
            Last ← Next(Last)
        { Next(Last=Nil; Last adalah alamt elemen terakhir }
        { Insert Last }
        Next(Last) ← P
        → L

procedure ListPlus (input L1,L2:List; output L3:List)
{ I.S. L1, L2 terdefinisi dengan dimensi yang sama,
mungkin kosong. }
{ F.S. L3 berisi elemen-elemen yang merupakan
penjumlahan elemen-elemen L1 dan L2 pada posisi
yang bersesuaian. }
Kamus Lokal:
    LTemp: List sementara
    sumT: Sum sementara
Algoritma
    if (IsEmpty(L1) and IsEmpty(L2)) then
        L3 ← Nil
    else
        ListPlus(Tail(L1), Tail(L2), LTemp)
        //AAA
        sumT ← Info(L1) + Info(L2)
        Lout ← Konso(sumT, LTemp)

function Max(L : List, IAwal : integer) → integer
{ Menghasilkan nilai maksimum dari tabel T }
{ Prekondisi: T tidak kosong }
{ Definisi rekursif pencarian nilai maksimum: }
{ Basis: IAwal = IAkhir: Max = T.TIIAwal
Rekurens: IAwal < IAkhir: max2(T.TIIAwal,Max(T,IAwal+1)) }
Kamus Lokal
Algoritma
    if IAwal = L.Neff then
        → L.TI[IAwal]
    else
        if L.TI[IAwal] > Max(L, IAwal + 1) then
            → L.TI[IAwal]
        else
            → Max(L, IAwal + 1) 

procedure MinMax (input L:List, output min,max:integer)
{ I.S. L terdefinisi, tidak kosong }
{ F.S. min berisi nilai minimum elemen L,
max berisi nilai maksimum elemen L }
Kamus Lokal
m,n : integer
Algoritma
    if (IsOneElmt(L)) then
        Min ← Info(L)
        Max ← Info(L)
    else
        Min, Max = MinMax(Next(L))
        if (Info(L) < n) then
            Min ← m
        else if (Info(L) > n) then
            Max ← n

function MinList (L : List) → address
{ Mengembalikan alamat dari elemen yang memiliki nilai terkecil. Apabila ada lebih dari
satu elemen, maka yang dikembalikan adalah address elemen yang muncul terakhir.
Prekondisi: L tidak kosong }
Kamus Lokal
    M : integer
Algoritma
    if IsOneElmt(L) then {basis}
        → Info(L)
    else
        M ← MinList(Next(L))
        if Info(L) < M then
            M ← Info(L)
        → M

function NBElmtlist (L : List) → integer
{ Mengirimkan banyaknya elemen list L, Nol jika L kosong }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L)) then { Basis 0 }
        → 0
    else { Rekurens }
        → 1 + NBElmtList(Next(L)

procedure NBElmtlist1 (input L : List, output N : integer)
{ I.S. L terdefinisi }
{ F.S. N berisi banyaknya elemen list }
KAMUS LOKAL
    N1 : integer
ALGORITMA
    if (IsEmpty(L)) then { Basis 0 }
        N ← 0
    else { Rekurens }
        NBElmtList1(Next(L),N1)
        N ← 1 + N1

procedure NBElmtlistAcc (input L : List, input/output Acc : integer,
output N : integer)
{ I.S. L terdefinisi }
{ F.S. N berisi banyaknya elemen list }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L)) then { Basis: kondisi berhenti }
        N ← Acc
    else { Rekurens: Next element, Proses }
        Acc ← Acc + 1
        NBElmtListAcc(Next(L),Acc,N)

function NthElement (L : List, N : integer > 0) → infotype
{ Mengembalikan nilai elemen ke-N list.
Mengembalikan ValUndef jika elemen list kurang dari N }
Kamus Lokal
    -
Algoritma
    if IsEmpty(L) or N = 1 then {basis}
        if IsEmpty(L) then {elemen list kurang dari N}
            → ValUndef
        else {N = 1}
            → Info(L)
    else
        → NthElement(Next(L),N-1)

function Search (L : List, X : infotype) → boolean
{ Mengirim true jika X adalah anggota list, false jika tidak }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L)) then { Basis 0 }
        → false
    else { Rekurens }
        if (info(L) = X) then
            → true
        else
            Search(Next(L), X)

procedure Search (input X: integer, input T: TabInt, input IAwal: integer,
output Idx: integer, output found: boolean)
{ I.S: X, T terdefinisi, IdxMin ≤ IAwal }
{ F.S: Idx adalah nilai ditemukannya X di T pada interval
[IAwal..T.Neff], found = true jika ditemukan }
KAMUS Lokal
Algoritma
if (IAwal > L.Neff) then
    found ← False
    Idx ← -999
else
    if (L.TI.IAwal = X) then
        Idx ← IAwal
        Found ← True
        → Idx, Found
    else
        Search(X, L, IAwal+1, Idx, found)


function Segitiga (N: integer) → integer
Kamus Lokal

Algoritma
    if N = 1 then
        →i
    else
        → N + Segitiga(N-1)
        
procedure SortList (input/output L : List)
{ I.S. L terdefinisi, tidak kosong }
{ F.S. elemen-elemen L terurut membesar }
{ Proses: selection sort dengan memanfaatkan fungsi MinList }
Kamus Lokal
    PMin : address
    Temp : infotype
Algoritma
    if IsOneElmt(L) then {basis, list 1 elemen adalah list terurut}
        {do nothing}
    else
        PMin ← MinList(Next(L))
        if PMin < Info(L) then {nilai terkecil di sisa list < current element}
            {tukar isi Info(PMin) dengan isi Info(L)}
            Temp ← Info(PMin)
            Info(PMin) ← Info(L)
            Info(L) ← Temp
        {urutkan sisa list}
        SortList(Next(L))

function SumPos (L: List) → integer
{ Menghasilkan penjumlahan semua elemen bilangan positif (>0)
dari L.
L kosong menghasilkan 0. }
Algoritma
    if (IsEmpty(L)) then
        → 0
    else
        if (Info(L) > 0) then
            → Info(L) + SumPos(Next(L))  
        else
            → SumPos(Next(L))

function Tail (L : List) → List
{ Mengirimkan list L tanpa elemen pertamanya, mungkin yang dikirimkan adalah
sebuah list kosong }
KAMUS LOKAL
    -
ALGORITMA
    → Next(L)

procedure Printlist (input L : List)
{ I.S. L terdefinisi }
{ F.S. Setiap elemen list diprint }
KAMUS LOKAL
    -
ALGORITMA
    if (IsEmpty(L)) then { Basis 0 }
        { tidak melakukan apa-apa }
    else { Rekurens }
        output (info(L))
        PrintList(Next(L))