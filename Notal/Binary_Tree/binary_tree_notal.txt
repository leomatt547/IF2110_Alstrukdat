KAMUS
{ Deklarasi TYPE POHON BINER }
    constant Nil: ... { konstanta pohon kosong, terdefinisi }
    type infotype: ... { terdefinisi }
    type address: ... { terdefinisi }
{ Type Pohon Biner }
    type BinTree: address
    type node: < Info: infotype, { simpul/akar }
    Left: BinTree, { subpohon kiri }
    Right: BinTree { subpohon kanan } >
{Cara akses/selektor, P: BinTree:
    Akar(P), Left(P), Right(P)}
{ Tambahan struktur data list untuk pengelolaan elemen pohon }
    type ElmtNode: < Info: infotype,
    Next: addressList >
    type ListOfNode: addressList
{ list linier yang elemennya adalah ElmtNode }

procedure AddDaun (input/Output P: BinTree,input X, Y: infotype,
input Kiri: boolean)
{ I.S. P tidak kosong, X adalah daun Pohon Biner P }
{ F.S. P bertambah simpulnya, dengan Y sebagai anak kiri X (jika
Kiri), atau sebagai anak Kanan X (jika not Kiri). Jika ada lebih
dari satu daun bernilai X, Y ditambahkan pada daun paling kiri. }
KAMUS LOKAL
ALGORITMA
    if (IsTreeOneElmt(P)) then
        P1 ← AlokList(Y)
        if (Kiri) then
            Left(P) ← P1
        else
            Right(P) ← P1
    else
        if SearchDaun(Left(P),X) then
            AddDaun(Left(P),X,Y,Kiri)
        else
            AddDaun(Right(P),X,Y,Kiri)

function Akar (P : BinTree) → infotype
{ Mengirimkan informasi yang tersimpan di Akar dari Pohon Biner yang tidak
kosong }
KAMUS LOKAL
    -
ALGORITMA
    → Info(P)

function BSearch (P: BinTree, X: infotype) → boolean
{ Mengirimkan true jika ada node dari P (BST) yang bernilai X }
KAMUS LOKAL
ALGORITMA
    if(IsTreeEmpty(P)) then
        --> False
    else
        if (Akar(P) = X) then
            --> True
        else if (X > Akar(P)) then
            BSearch(Right(P), X)
        else (X < Akar(P)) then
            BSearch(Left(P),X)

function BuildBST (Infos:array [1..100] of integer,
Neff:integer) → BinTree
{Mengirimkan BST yang semua elemennya ada di Infos (tidak terurut dan tidak unik). Infos
selalu diisi dari 1. Neff adalah indeks terakhir Infos yang terdefinisi, 0 jika kosong.}
KAMUS LOKAL
    i : integer
ALGORITMA
if (Neff(Infos) = 0) then
    --> Nil
else
    i traversal [1..Neff]
        InsSearchTree(Infos[i], T)
    --> T

function CountNonDaun --> integer ≥ 0
    {CountNonDaun(P) mengembalikan jumlah simpul yang
    bukan merupakan simpul daun pada P}
REALISASI
    CountNonDaun(P):
        if IsTreeOneElmt(P) then 
            -->0 {basis, simpul daun}
        else 
            depend on Left(P), Right(P)
                IsTreeEmpty(Left(P)) and not IsTreeEmpty(Right(P)):
                    --> 1+CountNonDaun(Right(P))
                not IsTreeEmpty(Left(P)) and IsTreeEmpty(Right(P)):
                    --> 1+CountNonDaun(Left(P))
                else
                    --> 1+CountNonDaun(Left(P))+CountNonDaun(Right(P))

procedure DelBinSearchTree (input/output P : BinTree, input X : infotype)
{ Menghapus simpul bernilai Key(P)=X }
{ infotype terdiri dari key dan count. Key menunjukkan nilai unik, dan Count
berapa kali muncul }
{ Basis : Pohon kosong }
{ Rekurens : }
KAMUS LOKAL
    q : address
    procedure DelNode (input/output P : BinTree)
ALGORITMA
    depend on X, Key(P)
        X < Akar(P) : DelBTree(Left(P),X)
        X > Akar(P) : DelBTree(Right(P),X)
        X = Akar(P) : { Delete simpul ini }
                        q ← P
                        if Right(q) = Nil then 
                            p ← Left(q)
                        else if Left(q) = Nil then 
                            p ← Right(q)
                        else
                            DelNode(Left(q))
                            Dealokasi(q)

procedure DelDaun (input/output P: BinTree,
input X: infotype)
{ I.S. P tidak kosong, minimum 1 daun bernilai X }
{ F.S. Semua daun yang bernilai X dihapus dari P }
KAMUS LOKAL
    temp : address
ALGORITMA
    if (IsTreeOneElmt(P) and (Akar(P) = X)) then
        temp <-- P
        P <-- Nil
        Dealokasi (temp)
    else
        if SearchDaun(Left(P),X) then
            DelDaun(Left(P),X)
        else
            DelDaun(Right(P),X)

procedure DelNode(inpu/output P: BinTree)
{ I.S. P adalah pohon biner tidak kosong }
{ F.S. q berisi salinan nilai Nilai daun terkanan disalin ke q }
{ Proses : }
{ Memakai nilai q yang global}
{ Traversal sampai daun terkanan, copy nilai daun terkanan P, salin nilai ke q
semula }
{ q adalah anak terkiri yang akan dihapus }
KAMUS LOKAL
    -
ALGORITMA
    depend on P
        Right(P) ≠ Nil : DelNode(Right(P))
        Right(P) = Nil : Key(q) ← Key(P)
                        Count(q) ← Count(P)
                        q ← P
                        P ← Left(P)

function EvalExpTree (B: BinTree) --> real 
{melemparkan nilai yang merupakan hasil evaluasi B. Jika kosong, melemparkan UndefVal}
KAMUS LOKAL
    l_var : integer
    r_var : integer
ALGORITMA
    if (IsTreeEmpty(B)) then
        --> UndefVal
    else if (IsTreeOneElmt(B)) and (IsOperan(Akar(B))) then
        --> getRealValue(Akar(B))
    else {Rekurens}
        l_var <-- EvalExpTree(Left(B))
        r_var <-- EvalExpTree(Right(B))
        depend on Akar(B):
            IsAdd(Akar(B)) : --> l_var+r_var
            IsSubstract(Akar(B)) : --> l_var-r_var
            IsMultiply(Akar(B)) : --> l_var*r_var
            IsDivide(Akar(B)) : --> l_var/r_var

procedure FindDescendantsOfX (input P : BinTree, input X: infotype, input/output Q: Queue)
{I.S.:P terdefinisi, X pasti ada sebagai info pada salah satu node pohon P
F.S.: Jika PtrX adalah alamat node pada pohon P dengan info=X, info dari seluruh node
        yang merupakan descendant PtrX masuk ke Queue Q}
KAMUS LOKAL
    Pt: address
ALGORITMA
    if (IsTreeEmpty(P)) then
        {do nothing}
    else
        Pt <-- SearchAdrX(P,x)
        if (Pt <> Nil)
            TreeToQ(Pt,Q)
        
procedure InsSearchTree (input X: infotype, input/output P: BinTree)
{ Menambahkan sebuah node X ke pohon biner pencarian P }
{ infotype terdiri dari key dan count. Key menunjukkan nilai unik, dan }
{ Count berapa kali muncul }
{ Basis: Pohon kosong }
{ Rekurens: Jika pohon tidak kosong, insert ke anak kiri jika nilai < Key(P) }
{ Atau insert ke anak kanan jika nilai > Key(P) }
{ Perhatikan bahwa insert selalu menjadi daun terkiri/terkanan dari subpohon }
KAMUS LOKAL
ALGORITMA
    if (IsTreeEmpty(P)) then { Basis: buat hanya akar }
        MakeTree(X,Nil,Nil,P)
else {Rekurens}
    depend on X, Key(P)
        X.Key = Key(P): Count(P) ← Count(P) + 1
        X.Key < Key(P): InsSearchTree(X,Left(P))
        X.Key > Key(P): InsSearchTree(X,Right(P))

procedure InOrder (input P : BinTree)
{ I.S. Pohon P terdefinisi }
{ F.S. Semua node pohon P sudah diproses secara InOrder: kiri, akar, kanan }
{ Basis: Pohon kosong: tidak ada yang diproses }
{ Rekurens: Proses secara Inorder (Left(P)); Proses Akar(P); Proses secara
Inorder (Right(P)) }
KAMUS LOKAL
    -
ALGORITMA
    if (P = Nil) then { Basis 0 }
        -
    else { Rekurens }
        InOrder(Left(P))
        Proses(P)
        InOrder(Right(P))

function IsUnerLeft (P : BinTree) → boolean
{ Prekondisi: P tidak kosong. Mengirimkan true jika P adalah pohon unerleft:
hanya mempunyai subpohon kiri }
KAMUS LOKAL
    -
ALGORITMA
    → (Right(P) = Nil) and (Left(P) ≠ Nil)

function IsUnerRight (P : BinTree) → boolean
{ Prekondisi: P tidak kosong. Mengirimkan true jika P adalah pohon unerright:
hanya mempunyai subpohon kanan }
KAMUS LOKAL
    -
ALGORITMA
    → (Left(P) = Nil) and (Right(P) ≠ Nil)

function IsBTree (P: BinTree) → boolean
{ Mengirimkan true jika P adalah balanced tree. Asumsi: P tidak kosong}
KAMUS LOKAL
ALGORITMA
    if (IsTreeOneElmt(P)) then
        --> True
    else
        nbElmtL ← NbElmt(Left(P))
        nbElmtR ← NbElmt(Right(P))
        heightL ← Height(Left(P))
        heightR ← Height(Right(P))
        if (Abs(nbElmtL-nbElmtR)>1 or Abs(heightL-heightR)>1) then
            --> False
        else
            if (IsUnerRight(P) or IsUnerLeft(P)) then
                --> True
            else
                --> (IsBTree(Left(P)) and IsBTree(Right(P)))

function IsBiner (P : BinTree) → boolean
{ Prekondisi: P tidak kosong. Mengirimkan true jika P adalah pohon biner:
mempunyai subpohon kiri dan subpohon kanan}
KAMUS LOKAL
    -
ALGORITMA
    → (Left(P) ≠ Nil) and (Right(P) ≠ Nil)

function Left (P : BinTree) → BinTree
{ Mengirimkan anak kiri dari Pohon Biner yang tidak kosong }
KAMUS LOKAL
    -
ALGORITMA
    → Left(P)

function Level (P: BinTree, X: infotype) → integer
{ Mengirimkan level dari node X yang merupakan salah satu daun
dari pohon biner P. Akar(P) level-nya adalah 1. Pohon P tidak
kosong dan elemen-elemennya unik. }
KAMUS LOKAL
ALGORITMA
if(IsTreeOneElmt(P))then
    --> 1
else
    if (Search(Left(P),X)) then
        --> 1+Level(Left(P),X)
    else {Search(Right(P),X)}
        --> 1+Level(Right(P),X)

procedure MakeTree (input X : infotype, input L, R : BinTree,
output P : BinTree)
{ Menghasilkan sebuah tree, jika alokasi berhasil P }
KAMUS LOKAL
    -
ALGORITMA
    P ← Alokasi (X)
    if (P ≠ Nil) then
        Left(P) ← L
        Right(P) ← R
    { end if }

function MakeListDaun (P: BinTree) → ListOfNode
{ Jika P adalah pohon kosong, maka menghasilkan list kosong. }
{ Jika P bukan pohon kosong: menghasilkan list yang elemennya
adalah semua daun pohon P. Diasumsikan alokasi selalu berhasil. }
KAMUS LOKAL
    L: ListOfNode
    R: ListOfNode
ALGORITMA
    if (IsTreeEmpty(P)) then
        --> Nil
    else if (IsTreeOneElmt(P)) then
        --> Alokasi(Akar(P))
    else
        List L = MakeListDaun(Left(P))
        List R = MakeListDaun(Right(P))
        --> Concat(L, R)

function MakeListLevel (P: BinTree, N: integer) → ListOfNode
{ Jika P adalah pohon kosong, maka menghasilkan list kosong. }
{ Jika P bukan pohon kosong: menghasilkan list yang elemennya
adalah semua elemen pohon P yang levelnya=N, jika semua alokasi
berhasil. Diasumsikan alokasi selalu berhasil. }
KAMUS LOKAL
    L: ListOfNode
    R: ListOfNode
ALGORITMA
    if (IsTreeEmpty(P)) then
        --> Nil
    else if (N = 1) then
        --> Alokasi(Akar(P))
    else
        List L = MakeListLevel(Left(P), N-1)
        List R = MakeListLevel(Right(P), N-1)
        --> Concat(L, R)

function NBDaun (P : BinTree) → integer
{ Pohon Biner tidak mungkin kosong. Mengirimkan banyaknya daun pohon }
{ Basis: Pohon yang hanya mempunyai akar: 1 }
{ Rekurens: }
{ Punya anak kiri dan tidak punya anak kanan: NBDaun(Left(P)) }
{ Tidak Punya anak kiri dan punya anak kanan : NBDaun(Right(P)) }
{ Punya anak kiri dan punya anak kanan : NBDaun(Left(P)) + NBDaun(Right(P)) }
KAMUS LOKAL
    -
ALGORITMA
    if (Left(P)=Nil) and (Right(P)=Nil) then { Basis 1 : akar }
        → 1
    else { Rekurens }
        depend on (P)
            Left(P)≠Nil and Right(P)=Nil → NBDaun(Left(P))
            Left(P)=Nil and Right(P)≠Nil → NBDaun(Right(P))
            Left(P)≠Nil and Right(P)≠Nil → NBDaun(Left(P))+NBDaun(Right(P))

procedure PreOrder (input P : BinTree)
{ I.S. Pohon P terdefinisi }
{ F.S. Semua node pohon P sudah diproses secara PreOrder: akar, kiri, kanan }
{ Basis: Pohon kosong : tidak ada yang diproses }
{ Rekurens: Proses Akar(P); Proses secara Preorder (Left(P)); Proses secara
Preorder (Right(P)) }
KAMUS LOKAL
    -
ALGORITMA
    if (P = Nil) then {Basis-0}
        -
    else { Rekurens, tidak kosong }
        Proses(P)
        PreOrder(Left(P))
        PreOrder(Right(P)

procedure PostOrder (input P : BinTree)
{ I.S. Pohon P terdefinisi }
{ F.S. Semua node pohon P sudah diproses secara PostOrder: kiri, kanan, akar }
{ Basis: Pohon kosong: tidak ada yang diproses }
{ Rekurens: Proses secara Postorder(Left(P)); Proses secara Postorder
(Right(P)); Proses Akar(P) }
KAMUS LOKAL
ALGORITMA
    if (P ≠ Nil) then { Basis 0}
        -
    else { Rekurens }
        PostOrder(Left(P))
        PostOrder(Right(P))
        Proses(P)

procedure PrintExpTree(input B: BinTree) 
{I.S.: B mungkin kosong} 
{F.S.: ekspresi yang direpresentasikan oleh B tercetak. Lihat contoh dibawah ini}
KAMUS LOKAL
ALGORITMA
    if (IsTreeEmpty(B)) then
        {do nothing}
    else
        if (IsOperan(B)) then
            output(Akar(B))
        else
            if(IsOperator(Akar(B))) then
                output("(")
            PrintExpTree(Left(B))
            output(Akar(B))
            PrintExpTree(Right(B))
            if(IsOperator(Akar(B))) then
                output(")")

procedure PrintFBS (input P: BinTree)
{I.S. : P terdefinisi; tidak mungkin kosong dan merepresentasikan suatu}
{ ekspresi aritmatika yang valid.}
{F.S. : Seluruh elemen P tercetak ke layar secara Breadth-First: terurut}
{ mulai dari level teratas sampai terbawah, dan untuk setiap level}
{ dari node terkiri ke node terkanan.}
{Proses : Mencetak semua elemen.}
KAMUS LOKAL
    Q : Queue
    Pt : BinTree
ALGORITMA
    Add(Q,P)
    if (not IsUnerLeft(Pt)) then
        Add(Q,Right(Pt)) then
    If (not IsUnerRight(Pt)) then
        Add(Q,Left(Pt))
    iterate:
        Del(Q,Pt)
        output (Akar(Pt))
    stop: (IsEmpty(Q) and IsTreeEmpty(Pt))

function RemberDaun (P : BinTree, X : infotype) --> BinTree
{ Menghasilkan sebuah pohon biner baru yang merupakan salinan dari P 
tanpa semua daun yang bernilai X. P mungkin kosong.
Diasumsikan alokasi elemen baru selalu berhasil }
KAMUS LOKAL
    PAkhir: BinTree
ALGORITMA
    if (IsTreeEmpty(P)) then
        -> Nil
    else
        AlokNode(PAkhir)
        if (Akar(P)<>X) then
            Left(PAkhir) <-- RemberDaun (Left(P),X)
            Right(PAkhir) <-- RemberDaun (Right(P),X)
    -->PAkhir

function Right (P : BinTree) → BinTree
{ Mengirimkan anak kanan dari Pohon Biner yang tidak kosong }
KAMUS LOKAL
    -
ALGORITMA
    → Right(P)

function Search (P: bintree, X:infotype) --> boolean
KAMUS LOKAL
-
ALGORITMA
    if (IsTreeEmpty(P)) then
        --> False
    else
        if Akar(P) = X then
            --> True
        else
            Search(Left(P),x) or Search(Right(P),X)

function SearchAdrX (P: bintree, X:infotype) --> address
{Mengirimkan alamat X pada pohon P; mengirimkan Nil jika X tidak ada pada pohon
Jika ada lebih dari satu X di pohon P, ambil X paling kiri}
KAMUS LOKAL
    found : boolean
ALGORITMA
    if (IsTreeEmpty(P)) then
        --> Nil
    else
        if (Akar(P) = X) and (not found) then
            found <-- True
            --> P
        else
            Search(Left(P),x) or Search(Right(P),X)

function SearchDaun(input/output P: BinTree, input X:infotype) --> boolean
KAMUS LOKAL
ALGORITMA
    if (IsTreeOneElmt(P)) then
        --> (Akar(P) = X)
    else
        depend on P
            IsUnerLeft(P) : --> SearchDaun(Left(P),X))
            IsUnerRight(P) : --> SearchDaun(Right(P),X)
            IsBiner(P) : --> SearchDaun(Left(P),X)) or SearchDaun(Right(P),X)

procedure SmashedTree (input P: BinTree, output x: string)
{I.S. : P terdefinisi; tidak mungkin kosong dan merepresentasikan suatu}
{       ekspresi aritmatika yang valid.}
{F.S. : Menghasilkan x dimana sebuah string yang merepresentasikan pohon P}
{       secara linier.}
{Proses : Menghasilkan struktur flat berdasarkan struktur bertingkat dari}
{         sebuah pohon. Pada kasus kedua contoh pohon di atas, prosedur}
{         akan menghasilkan string: “15*11-5”}
KAMUS LOKAL
    tempx : infotype
ALGORITMA
    if IsTreeEmpty(P) then
        --> {do nothing}
    else { Rekurens, tidak kosong }
        SmashedTree(Left(P), x)
        x <-- x & Akar(P)
        SmashedTree(Right(P),x)
    
function Tinggi (R : BinTree) → integer
{ Pohon Biner mungkin kosong. Mengirim “depth” yaitu tinggi dari pohon }
{ Basis: Pohon kosong: tingginya nol }
{ Rekurens: 1 + maksimum (Tinggi(Anak kiri), Tinggi(AnakKanan)) }
KAMUS LOKAL
    -
ALGORITMA
    if (R = Nil) then { Basis 0 }
        → 0
    else { Rekurens }
        → 1 + max (Tinggi(Left(R), Right(R))

function Tree(X : infotype, L, R : BinTree) → BinTree
{ Menghasilkan sebuah tree, jika alokasi berhasil P }
KAMUS LOKAL
    P : address
ALGORITMA
    P ← Alokasi(X)
    if (P ≠ Nil) then
        Left(P) ← L
        Right(P) ← R
    { end if }
    → P

function TreeToQ (input P : BinTree, input/output Q : Queue)
{I.S.: P terdefinisi
F.S.: Seluruh Info node pada pohon P masuk ke Queue Q secara pre-order}
KAMUS LOKAL
ALGORITMA
    if (IsTreeEmpty(P)) then
        {do nothing}
    else
        Push(Q,Akar(P))
        TreetoQ(Left(P),Q)
        TreetoQ(Right(P),Q)


List2BBST(L):
if IsEmpty(L) then
 {basis, pohon kosong}
// \\
else
    let <ki,a,ka>=Partisi(L,NbElmt(L) div 2) in
        // List2BBST(ki) a List2BBST(ka) \\

function Partisi (input: List of integer, integer) --> List of integer, integer, List of integer
{Partisi(L,n) menghasilkan list L1, integer x,
dan list L2. L1 berisi n elemen pertama dari
L, x adalah elemen ke n+1, dan L2 berisi
elemen sisanya. Prekondisi: n<NbElmt(L)}
Algoritma
    Partisi(L,n):
    if n=0 then 
        <[], FirstElmt(L), Tail(L)>
    else let <l,m,r> = Partisi(Tail(L),n-1) in
        <konso(FirstElmt(L),l),m,r>