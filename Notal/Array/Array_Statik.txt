{ MODUL TABEL INTEGER DENGAN ALOKASI STATIK }
{ Berisi Definisi dan semua primitif pemrosesan tabel STATIK dan IMPLISIT }
{ Penempatan elemen TIDAK SELALU RAPAT KIRI, dan elemen-elemen selalu kontigu }
{ Kamus Umum }
constant IdxMax : integer = 100
constant IdxUndef : integer = 0 { indeks tak terdefinisi }
constant ValUndef : integer = -999 { value tak terdefinisi }
{ Definisi elemen dan koleksi objek }
type IdxType : integer { type indeks }
type ElType : integer { type elemen tabel }
type TabInt : < TI : array [1..IdxMax] of ElType > //DEFINISIKAN memori penyimpan elemen
{ Definisi, jika T : TabInt :
    Tabel kosong: "i(1 ≤ i ≤ IdxMax) T.TI[i] = ValUndef
    Definisi elemen pertama : T.TI[GetFirstIdx(T)]
    Definisi elemen terakhir : T.TI[GetLastIdx(T)] }
{ Konstruktor: create tabel kosong }
procedure MakeEmpty (output T : TabInt) // LENGKAPI parameternya
{ I.S. sembarang }
{ F.S. Terbentuk tabel T kosong dengan kapasitas IdxMax elemen }
function GetFirstIdx (T : TabInt) --> IdxType // LENGKAPI parameternya
{ Mengirimkan indeks elemen pertama. Prekondisi : Tabel tidak kosong }
function GetLastIdx (T : TabInt) --> IdxType // LENGKAPI parameternya
{ Mengirimkan indeks elemen terakhir. Prekondisi : Tabel tidak kosong}
function IsFull (T : TabInt) --> boolean // LENGKAPI parameternya
{ Mengirimkan true jika penampung belum penuh, false jika sudah penuh }

procedure AddSortedX (input/output T : TabInt, input X : ElType)
Kamus lokal
    i,j,first : integer
    isEmpty : boolean
Algoritma
    {periksa apakah tabel kosong}
    i <-- 1; 
    isEmpty <-- T.TI[1]=ValUndef
    while i<IdxMax and isEmpty do
        i <-- i + 1
        isEmpty <-- T.TI[i]=ValUndef
    {i≥IdxMax or not isEmpty}
    if isEmpty then {kosong, X dimasukkan sebagai elemen pertama}
        T.TI[1] <-- X
    else
        i <-- GetLastIdx(T)
        if i=IdxMax then GeserKiri(T)
        first <-- GetFirstIdx(T)
        while (X < T.TI[i] and i>first) do
            T.TI[i+1] <-- T.TI[i]
            i <-- i - 1
        { X >= T.TI[i] or i=first }
        if (X >= T.TI[i]) then
            T.TI[i+1] <-- X
        else
            T.TI[i+1] <-- T.TI[i]
            T.TI[i] <-- X


procedure GeserKiri (input/output T : TabInt)
Kamus lokal
    i,j,last : integer
Algoritma
    i <-- GetFirstIdx(T); last <-- GetLastIdx(T)
    j <-- 1
    while (i <= last) do
        T.TI[j] <-- T.TI[i]
        T.TI[i] <-- ValUndef
        j <-- j + 1
        i <-- i + 1
    {i > GetLastIdx(T)}

function GetFirstIdx (T : TabInt) --> IdxType
{versi yang memanfaatkan prekondisi Tabel tidak kosong}
Kamus lokal
    i : integer;
Algoritma
    i <-- 1
    while (T.TI[i] = ValUndef) do
        i <-- i + 1
    {T.TI[i] <> ValUndef, elemen terdefinisi}
    --> i

function GetLastIdx (T : TabInt) --> IdxType
{versi yang memanfaatkan prekondisi Tabel tidak kosong}
Kamus lokal
    i : integer;
Algoritma
    i <-- GetFirstIdx(T)
    while (T.TI[i] ≠ ValUndef) and (i < IdxMax) do
        i <-- i + 1
    {(T.TI[i] = ValUndef) or (i = IdxMax)}
    if ( T.TI[i] = ValUndef) then
        --> i - 1
    else
        --> IdxMax

function IsFull (T : TabInt) --> boolean
Kamus lokal
    -
Algoritma
    --> (GetLastIdx(T) – GetFirstIdx(T) + 1) = IdxMax
