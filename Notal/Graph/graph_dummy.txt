type adrVertex : pointer to adrVertex
type Vertex :<Id : integer,
            Next : adrVertex>
type VList : <First, Last : adrVertex>
type adrEdge : pointer to Edge
type Edge : < Prec : adrVertex
              Succ : adrVertex
              Next : adrEdge >
type EList : <First, Last : adrEdge>
type Graph : <V: VList,E : EList>
{Selektor}
{Jika G : Graph, V:VList , E:Elist, Pv:adrVertex, Pe : adrEdge, maka penulisan:
    Vertices(G) menjadi G.V
    Edges(G) menjadi G.E
    FirstV(V) menjadi V.First
    LastV(V) menjadi V.Last
    FirstE(E) menjadi E.First
    LastE(E) menjadi E.Last
    Id(Pv) menjadi Pv^.Id
    Next(Pv) menjadi Pv^.Next
    Prec(Pe)menjadi Pe^.Prec
    Succ(Pe) menjadi Pe^.Succ
    Next(Pe) menjadi Pe^.Next}

SearchEdge (G:Graph, prec:integer, succ:integer) --> adrEdge
{Mengembalikan address busur yang menyimpan info busur (prec,succ) jika ada 
pada graph G, Nil jika tidak ada. prec dan succ mungkin bukan simpul pada G}
KAMUS LOKAL
    Pe : adrEdge
    E : EList
    found : boolean
ALGORITMA
    E <-- Edges(G)
    if (FirstE(E)=Nil) then
        --> Nil
    else
        found <-- False
        Pe <-- Firts(E)
        while (Pe<>dummy) and (not found) do
            if (Id(Prec(Pe))=prec) and (Id(Succ(Pe))=succ) then
                found <-- True
            else 
                Pe <-- Next(Pe)
        if (Pe = dummy) and (found) then
            --> Pe
        else
            --> Nil

procedure InsEdge (input/output G:Graph, prec:integer, succ:integer) 
{Menambahkan busur dari prec menuju succ ke dalam G
I.S. G terdefinisi, prec,succ adalah simpul G; busur(prec,succ) belum ada pada G
F.S. Jika alokasi berhasil, busur (prec,succ) menjadi elemen terakhir Edges(G)
    Jika alokasi gagal, G tetap}
KAMUS LOKAL
    E: EList
    Pe : adrEdge
ALGORITMA
    E <-- Edges(G)
    if (FirstE(E)=dummy) then
        Pe <-- AlokEdge(prec,succ)
        if (Pe <> Nil) then
            FirstE(E) <-- Pe
            Next(Pe) <-- Nil
    else
        Pe <-- AlokEdge(prec,succ)
        if (Pe <> Nil) then
            LastE(E) <-- Pe
            Next(Pe) <-- LastE(E)
        
procedure DelVertex (input/output G:Graph, input X : integer)
 {Menghapus simpul X dari G}
 {I.S. G terdefinisi, X terdefinisi dan ada pada G, jumlah simpul pada G lebih dari 1}
 {F.S. busur(prec,succ) dihapus dari G}
 KAMUS LOKAL
    E : Elist
    V : VList
    Pe : adrEdge
    Pv : adrVertex
    i : integer
 ALGORITMA
    if (FirstE(E)<> Nil) and (FirstV(V)<>Nil) then
        Pv <-- SearchVertex(G,X)
        if (Pv <> Nil) then
            Pe <-- FirstE(E)
            if (Prec(Pe)=Pv) or (Succ(Pe)=Pv) then
                DelEdge(G,Prec(Pe),Succ(Pe))
            Pe <-- Next(Pe)
            while (Pe <> Nil) do
            if (Prec(Pe)=Pv) or (Succ(Pe)=Pv) then
                DelEdge(G,Prec(Pe),Succ(Pe))
            Pe <-- Next(Pe)
            {Pe <> Nil}
        DealokVertex(Pv)


                

            



