{ *** ADT Queue, model alternatif II dengan head bergerak dan bisa penuh “semu” *** }
{ *** Konstanta *** }
constant Nil : integer = 0
constant MaxEl : integer = 10
{ *** Definisi elemen dan address *** }
type infotype : integer
type address : integer { indeks tabel }
{ *** Definisi Type Queue *** }
type Queue : < T : array [1..MaxEl] of infotype, { tabel penyimpan elemen }
               HEAD : address, { alamat penghapusan }
               TAIL : address { alamat penambahan } >
{ Definisi Queue kosong: Head = Nil; TAIL = Nil. }
{ *** Predikat Pemeriksaan Kondisi Queue *** }
function IsEmpty (Q : Queue) --> boolean
{ Mengirim true jika Q kosong }
function IsFull (Q : Queue) --> boolean
{ Mengirim true jika tabel penampung elemen Q sudah penuh yaitu mengandung MaxEl elemen }
function NBElmt (Q : Queue) --> integer
{ Mengirimkan banyaknya elemen queue. Mengirimkan 0 jika Q kosong. }
{ *** Konstruktor *** }
procedure CreateEmpty (output Q : Queue)
{ I.S. Sembarang }
{ F.S. Sebuah Q kosong terbentuk dengan HEAD = Nil dan TAIL = Nil }
{ *** Operator-Operator Dasar Queue *** }
procedure Add (input/output Q : Queue, input X : infotype)
{ Proses : Menambahkan X pada Q dengan aturan FIFO }
{ I.S. Q mungkin kosong, tabel penampung elemen Q TIDAK penuh. }
{ F.S. X menjadi TAIL yang baru, TAIL "maju". }
{ Jika TAIL = MaxEl, maka elemen-elemen Queue terlebih dahulu harus digeser. }
procedure Del (input/output Q : Queue, output X : infotype)
{ Proses : Menghapus elemen pertama pada Q dengan aturan FIFO }
{ I.S. Q tidak kosong }
{ F.S. X = nilai elemen HEAD pada I.S., }
{ Jika Queue masih ada isinya : HEAD "maju". }
{ Jika Queue menjadi kosong, HEAD = TAIL = Nil. }

procedure Add/Enqueue (input/output Q : Queue, input X : infotype)
Kamus Lokal
    i, j : address
Algoritma
    if (Q.TAIL = MaxEl) then { penuh semu, geser }
        i <-- 0
        j traversal [Q.HEAD..Q.TAIL]
            i <-- i + 1
            Q.T[i] <-- Q.T[j]
        Q.HEAD ¬ 1; Q.TAIL ¬ i
    else
        if isEmpty(Q) then
            Q.HEAD <-- 1
    Q.TAIL <-- Q.TAIL + 1
    Q.T[Q.TAIL] <-- X

procedure Del/Dequeue (input/output Q : Queue, output X : infotype)
Kamus Lokal
    -
Algoritma
    X <-- Q.T[Q.HEAD]
    if (NBELMT(Q) = 1) then
        Q.HEAD <-- NIL
        Q.TAIL <-- NIL
    else
        Q.HEAD <-- Q.HEAD + 1

function NbElmt (Q: Queue) --> integer
{Menghitung banyaknya elemen respresentasi list linier}
Kamus Lokal
    p: address
    x : integer
Algoritma
    p <-- head(Q)
    x <-- 0
    while (p <> nil) do
        x <-- x+1
        p <-- next(p)
    --> x

procedure Enqueue (input/output Q: Queue, P:Address)
{Menginsert Priority Queue sesuai urutan}
{I.S. Sudah Teralokasi}
KAMUS LOKAL
pt: address
ALGORITMA
    if (IsEmpty(Q)) then
        HEAD(Q) <-- P
        TAIL(Q) <-- P
    else
        pt <-- HEAD(Q)
        prev <-- Nil
        while (pt <> Nil) and (Prio(P)<Prio(pt)) do
            prev <-- pt
            pt <-- Next(pt)
        if (pt = Nil) then
            Next(prev) <-- P
            Tail(Q) <-- P
        else (pt <> Nil)
            if (prev = Nil)
                Next(P) <-- Head(Q)
                Head(Q) <-- P
            else
                Next(prev) <-- P
                Next(P) <-- pt